package algorithme;

public class RivestCipher4 {
		
//Inspiré du site http://codes-sources.commentcamarche.net/ by skynet.
	
	
		/*variables*/	
			
		/*Key must be 256 octet*/

		static char[] S;
		static char[] T;
		static int keylen;
		static int i;
		static int j;

			public static void RC4_InitKey(String key)
			{
				keylen = key.length();
				for(i=0;i<256;i++)
				{
					S[i]=(char)i;
					T[i] = key.charAt(i % keylen);
				}
				
				j=0;
				for(i=0;i<256;i++)
				{
					  j = (j + S[i] + T[i]) % 256;
                      S[i] ^= S[j];
                      S[j] ^= S[i];
                      S[i] ^= S[j];
				}
				i=0;
				j=0;
			}
			
			
			
			/*private static void Swap(char[] s, int i, int j) {
				char temp;
				temp = s[j];
			    s[j] = s[i];
			    s[i] = temp;
			}*/

			public static String RC4_Encrypt(String Input_Str)
			{
			int i = 0, j = 0, k, t;
			int cpt;
			char[] cipherText = new char[Input_Str.length()];
			for(cpt=0;cpt<Input_Str.length();cpt++)
			{
				 i = (i + 1) % 256;
                 j = (j + S[i]) % 256;
                 S[i] ^= S[j];
                 S[j] ^= S[i];
                 S[i] ^= S[j];
                 t = (S[i] + S[j]) % 256;
                 k = S[t];
                 cipherText[cpt] = (char) (Input_Str.charAt(cpt) ^ k);
			}
			String sortie=new String(cipherText);
			return sortie;
			}
			
			
			public static String RC4_Decrypt(String Input_Str){
				return RC4_Encrypt(Input_Str);
			}			
		}
