package algorithme;

import java.security.InvalidKeyException;

public class RivestCipher4 {
		
//Inspiré du site http://codes-sources.commentcamarche.net/ by skynet.
	
	
		/*variables*/	
			
		/*Key must be 256 octet*/
/*
		static char[] S;
		static char[] T;
		static int keylen;
		static int i;
		static int j;

			public static void RC4_InitKey(String key)
			{
				keylen = key.length();
				for(i=0;i<256;i++)
				{
					S[i]=(char)i;
					T[i] = key.charAt(i % keylen);
				}
				
				j=0;
				for(i=0;i<256;i++)
				{
					  j = (j + S[i] + T[i]) % 256;
                      S[i] ^= S[j];
                      S[j] ^= S[i];
                      S[i] ^= S[j];
				}
				i=0;
				j=0;
			}

			public static String RC4_Encrypt(String Input_Str)
			{
			int i = 0, j = 0, k, t;
			int cpt;
			char[] cipherText = new char[Input_Str.length()];
			for(cpt=0;cpt<Input_Str.length();cpt++)
			{
				 i = (i + 1) % 256;
                 j = (j + S[i]) % 256;
                 S[i] ^= S[j];
                 S[j] ^= S[i];
                 S[i] ^= S[j];
                 t = (S[i] + S[j]) % 256;
                 k = S[t];
                 cipherText[cpt] = (char) (Input_Str.charAt(cpt) ^ k);
			}
			String sortie=new String(cipherText);
			return sortie;
			}
			
			
			public static String RC4_Decrypt(String Input_Str){
				return RC4_Encrypt(Input_Str);
			}			*/
	
    private static char[] key;
    private static int[] sbox;
    private static final int SBOX_LENGTH = 256;
    private static final int KEY_MIN_LENGTH = 5;
    
    
    public RivestCipher4(String key) throws InvalidKeyException {
        setKey(key);
    }
 
    public RivestCipher4() {
    }
 
    public char[] decrypt(final char[] msg) {
        return encrypt(msg);
    }
 
	
	  public static char[] encrypt(final char[] msg) {
	        sbox = initSBox(key);
	        char[] code = new char[msg.length];
	        int i = 0;
	        int j = 0;
	        for (int n = 0; n < msg.length; n++) {
	            i = (i + 1) % SBOX_LENGTH;
	            j = (j + sbox[i]) % SBOX_LENGTH;
	            swap(i, j, sbox);
	            int rand = sbox[(sbox[i] + sbox[j]) % SBOX_LENGTH];
	            code[n] = (char) (rand ^ (int) msg[n]);
	        }
	        return code;
	    }
	 
	    public static int[] initSBox(char[] key) {
	        int[] sbox = new int[SBOX_LENGTH];
	        int j = 0;
	 
	        for (int i = 0; i < SBOX_LENGTH; i++) {
	            sbox[i] = i;
	        }
	 
	        for (int i = 0; i < SBOX_LENGTH; i++) {
	            j = (j + sbox[i] + key[i % key.length]) % SBOX_LENGTH;
	            swap(i, j, sbox);
	        }
	        return sbox;
	    }
	 
	    private static void swap(int i, int j, int[] sbox) {
	        int temp = sbox[i];
	        sbox[i] = sbox[j];
	        sbox[j] = temp;
	    }
	 
	    public void setKey(String key) throws InvalidKeyException {
	        if (!(key.length() >= KEY_MIN_LENGTH && key.length() < SBOX_LENGTH)) {
	            throw new InvalidKeyException("Key length has to be between "
	                    + KEY_MIN_LENGTH + " and " + (SBOX_LENGTH - 1));
	        }
	 
	        this.key = key.toCharArray();
	    }
	 
	}
	
	
		}
